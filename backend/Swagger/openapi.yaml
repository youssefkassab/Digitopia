openapi: 3.0.3
info:
  title: Digitopia Backend API
  version: 1.0.0
  description: |
    OpenAPI (Swagger) specification for the Digitopia backend.
    Authentication is via Bearer JWT in the Authorization header.
servers:
  - url: http://localhost:3000
    description: Local development
tags:
  - name: Users
  - name: Courses
  - name: Messages
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiMessage:
      type: object
      properties:
        message:
          type: string
    ApiError:
      type: object
      properties:
        error:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              path:
                type: array
                items:
                  type: string
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        national_number:
          type: string
        role:
          type: string
          enum: [admin, teacher, user]
        Grade:
          type: string
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
    LoginResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    SignupRequest:
      type: object
      required: [name, email, password, national_number, role]
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        national_number:
          type: string
          minLength: 3
          maxLength: 30
        role:
          type: string
          enum: [user, teacher]
        Grade:
          type: string
          maxLength: 5
    UpgradeRoleRequest:
      type: object
      required: [id, role]
      properties:
        id:
          type: integer
          minimum: 1
        role:
          type: string
          enum: [user, teacher, admin]
    Course:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        teacher_id:
          type: integer
        tags:
          type: string
          description: Comma-separated tag names
    CourseCreateRequest:
      type: object
      required: [name, description, price]
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 255
        description:
          type: string
          minLength: 2
        price:
          type: number
          format: float
          minimum: 0
        teacher_id:
          type: integer
          description: Admin-only optional override
        tags:
          type: array
          items:
            oneOf:
              - type: integer
              - type: string
              - type: object
                properties:
                  id:
                    oneOf:
                      - type: integer
                      - type: string
                required: [id]
    CourseUpdateRequest:
      type: object
      required: [id]
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        teacher_id:
          type: integer
        date:
          type: string
        time:
          type: string
        tags:
          type: array
          items:
            oneOf:
              - type: integer
              - type: string
              - type: object
                properties:
                  id:
                    oneOf:
                      - type: integer
                      - type: string
                required: [id]
    CourseIdRequest:
      type: object
      required: [id]
      properties:
        id:
          type: integer
    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    TagCreateRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
    Message:
      type: object
      properties:
        id:
          type: integer
        sender:
          type: string
          format: email
        content:
          type: string
        seen:
          type: integer
          description: 0 or 1
        message_date:
          type: string
          format: date-time
        message_time:
          type: string
          format: date-time
    MessageCreateRequest:
      type: object
      required: [senderEmail, content]
      properties:
        senderEmail:
          type: string
          format: email
        content:
          type: string
          minLength: 1
          maxLength: 5000
    MessageUpdateRequest:
      type: object
      required: [id, content]
      properties:
        id:
          type: integer
        content:
          type: string
          minLength: 1
          maxLength: 5000
    MessageIdRequest:
      type: object
      required: [id]
      properties:
        id:
          type: integer
paths:
  /api/users/signup:
    post:
      tags: [Users]
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal server error
  /api/users/login:
    post:
      tags: [Users]
      summary: Login and get JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal server error
  /api/users/logout:
    post:
      tags: [Users]
      summary: Logout (stateless)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/users/user:
    get:
      tags: [Users]
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
  /api/users/upgradeRole:
    post:
      tags: [Users]
      summary: Admin updates user role
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeRoleRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal server error

  /api/courses/create:
    post:
      tags: [Courses]
      summary: Create a course
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal server error
  /api/courses/all:
    get:
      tags: [Courses]
      summary: List all courses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
  /api/courses/teacher/mycourses:
    get:
      tags: [Courses]
      summary: List current teacher's courses (requires teacher role)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '500':
          description: Internal server error
  /api/courses/find/{id}:
    get:
      tags: [Courses]
      summary: Get a course by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '500':
          description: Internal server error
  /api/courses/tags:
    get:
      tags: [Courses]
      summary: List all tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '500':
          description: Internal server error
  /api/courses/tag:
    post:
      tags: [Courses]
      summary: Create a tag (admin or teacher)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
        '500':
          description: Internal server error
  /api/courses/update:
    put:
      tags: [Courses]
      summary: Update a course (fields and/or tags)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not found or not owned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal server error
  /api/courses/delete:
    delete:
      tags: [Courses]
      summary: Delete a course
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseIdRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
        '404':
          description: Not found or not owned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal server error

  /api/messages/send:
    post:
      tags: [Messages]
      summary: Public send a message (rate-limited)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error
  /api/messages/receiveAll:
    get:
      tags: [Messages]
      summary: Admin get all messages
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '500':
          description: Internal server error
  /api/messages/MyMessages:
    get:
      tags: [Messages]
      summary: Get current user's messages
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '500':
          description: Internal server error
  /api/messages/update:
    patch:
      tags: [Messages]
      summary: Update a message by sender
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal server error
  /api/messages/seen:
    patch:
      tags: [Messages]
      summary: Admin marks message as seen
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageIdRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal server error
  /api/messages/delete:
    delete:
      tags: [Messages]
      summary: Delete a message (admin or owner)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageIdRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
        '500':
          description: Internal server error
